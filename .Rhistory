x <- 1:4
y <- 2:3
x+y
x
y
x <- c(3, 5, 1, 10, 12, 6)
x
x[x > 0] <- 6
x
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] == 0
x[x < 6] <- 0
x
mydata <- read.csv(hw1_data.csv)
mydata <- read.csv("hw1_data.csv")
mydata
names(mtdate)
names(mydata)
x[1,2]
x[1]
x[1,]
x([1,])
head(mydata, 2)
nrow(mydata)
tail(mydata, 2)
x[47,]
x[47, ]
x[[47]]
readlines(mydata, 47)
readLines(mydata, 47)
x <- readLines(mydata, 47)
is.na(x.ozone)
x(ozone)
mydata(ozone)
z.ozone
mydata.ozone
data.frame(mydata, 1)
numeric(10)
rnorm()
help(rnorm)
rnorm(200)
x <- matrix(rnorm(200), 20, 10)
x
help(apply)
apply(x, 2, mean)
apply(x, 1, mean)
mean(x)
mean(x)
apply(x, 1, count)
help(quantile)
apply(x, 1, quantile, probs = c(0.25, 0.75))
apply(x, 2, quantile, probs = c(0.25, 0.75))
rnorm(2*2*10)
array(rnorm(2*2*10), c(2, 2, 10))
a<-array(rnorm(2*2*10), c(2, 2, 10))
apply(a, c(1,2), mean)
rowMeans(1)
help(rowMean)
help(rowMeans)
rowMeans(a, dims=2)
rowMeans(a, dims=1)
rowMeans(a, dims=3)
str(rowMeans)
help(tapply)
help(runif)
x<-c(rnorm(10), unif(10), rnorm(10,1))
x<-c(rnorm(10), runif(10), rnorm(10,1))
help(rnorm)
x
help(gl)
gl(x,10)
gl(3,10)
length(gl(3,10))
gl(3,10)==1
f<-gl(3,10)
f
help(tapplu)
help(tapply)
tapply(x,f,mean)
x<-c(rnorm(10), runif(15), rnorm(10,1))
f<-c(gl(c(1),10),gl(c(2), 15) )
f
length(f)
help(gl)
x<-c(rnorm(10), runif(10), rnorm(10,1))
f<-gl(3,10)
tapply(x,f,mean)
tapply(x,f,mean,simplify =F)
help(range)
tapply(x,f,range)
str(split)
help(split)
split(x,f,drop =F
)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")])
)
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]), na.rm = T)
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = T))
lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = T))
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = T))
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
interaction(f1,f2)
str(split(x, list(f1,f2)))
x
split(x, f1)
split(x,f2)
split(x,list(f1,f2)
)
str(split(x, list(f1,f2)))
str(split(x, list(f1,f2)), drop = T)
str(split(x, list(f1,f2), drop = T))
help(mapply)
rep(1,4)
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)
noise <- function(n, meanm sd) {
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5,1,2)
noise(1:5, 1:5, 2)
noise(1:5, 1:5, 2)
noise(1:5, 1:5, 2)
noise(1:5, 1:5, 2)
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, c(2,4,7))
mapply(noise, 1:5, 1:5, 2:4)
invisible(x)
help(invisible)
printmsg <- function(x) {
if(x>0) {print("negative")}
else {print("positive")}}
printmsg(-5)
printmsg <- function(x) {
if(x<0) {print("negative")}
else {print("positive")}
invisible(x)
}
printmsg(5)
printmsg(-5)
printmsg(NaN)
printmsg <- function(x) {
if(x<0) {print("x is negative")}
else {print("x is positive")}
}
printmsg(1)
printmsg <- function(x) {
if(x<0) {print("x is negative")}
else {print("x is positive")}
invisible(x)
}
printmsg(1)
library(datasets)
data(iris)
?iris
str(iris)
head(iris)
split(iris, iris$species)
split(iris, iris$Species)
sapply(split(iris, iris$Species))
sapply(split(iris, iris$Species), mean)
mapply(split(iris, iris$Species), mean)
lapply(split(iris, iris$Species), mean)
s <- split(iris, iris$Species)
s
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width)], na.rm = T))
)
)
)
)
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width)], na.rm = T))
lapply(s, function(x) colMeans(x[,c("Sepal.Length")]))
s
lapply(s, function(x) colMeans(x[,c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[,c("Sepal.Length", "Sepal.Width")]))
sapply(s, function(x) colMeans(x[,c("Sepal.Length", "Sepal.Width")]))
colMeans(iris)
iris[,1:4]
rowMeans(iris[,1:4])
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
apply(iris[,1:4], 2, mean)
data(mtcars)
?mtcars
head(mtcars)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mitcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
m<-sapply(split(mtcars$hp, mtcars$cyl), mean)
m
m$4
m[,1]
m[1]
m[1]-m[8]
m[1]-m[3]
debug(ls)
ls
ls
ls
gl
debug(lm)
lm(y ~ x)
help(solve)
x <- matrix(1:4, 2, 2)
x
solve(x)
setwd("~/GitHub/ProgrammingAssignment2")
source('~/GitHub/ProgrammingAssignment2/cachevector.R')
bigVec <- makeVector(1:1000)
bigVec <- makeVector(1:1000)
bigVec <- makeVector(1:1000)
debugSource('~/GitHub/ProgrammingAssignment2/cachevector.R')
debugSource('~/GitHub/ProgrammingAssignment2/cachevector.R')
bigVec <- makeVector(1:1000)
bigVec
bigVec$x
bigVec$get
bigVec$get$x
debugSource('~/GitHub/ProgrammingAssignment2/cachevector.R')
cachemean(bigVec)
cachemean(bigVec)
bigVec$getmean()
bigVec$setmean()
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m1 <- makeCacheMatrix(1:100, 25, 4)
m1 <- makeCacheMatrix(matrix(1:100, 25, 4)
)
cacheSolve(m1)
cacheSolve(m1)
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m1)
data
m1 <- makeCacheMatrix(matrix(1:64, 8, 8))
cacheSolve(m1)
m1$data
data
cacheSolve(m1)
cacheSolve(m1)
data
solve(data)
help(solve)
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
x <- matrix(1:25, 5, 5)
x
solve(x)
x <- matrix(1:9, 3, 3)
solve(x)
x <- matrix(1:4, 2, 2)
solve(x)
m1 <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSOlve(m1)
cacheSolve(m1)
cacheSolve(m1)
m1 <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(m1)
m1$set
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m1 <- makeCacheMatrix(matrix(1:4, 2, 2))
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m1 <- makeCacheMatrix(matrix(1:4, 2, 2))
m1$x
m1$inv
m1$get
m1$get()
cacheSolve(m1)
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
